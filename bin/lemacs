#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  (ros:ensure-asdf)
  #+quicklisp(ql:quickload '(uiop) :silent t))
  

(defpackage :ros.script.lemacs
  (:use :cl))
(in-package :ros.script.lemacs)

(defparameter *home* (or (uiop:getenv "LEMACS")
                         (namestring (merge-pathnames "Lemacs" (user-homedir-pathname)))))

(defun shell (command)
  (let ((code (third
               (multiple-value-list
                (uiop:run-program
                 (format nil "~A ~A"
                         #+os-windows "powershell $OLDPWD=pwd;"
                         #-os-windows ""
                         command)
                 :output :interactive
                 :error-output :interactive
		 )))))
    code))

(defun clone ()
  (if (zerop (shell (format nil "git clone --recursive https://github.com/Liszt21/Lemacs ~A" *home*)))
    (print "Successful installed lemacs")
    (print "Install failed, deleting folder...")))

(defun config ()
  (let ((chemacs (merge-pathnames ".emacs.d" (user-homedir-pathname))))
    (when (uiop:directory-exists-p chemacs)
      (rename-file chemacs (merge-pathnames ".emacs.d.bak" (user-homedir-pathname))))
    (shell (format nil "~A ~A ~A"
                   "sudo ln -s"
                   (concatenate 'string
                                *home*
                                "/config/chemacs2")
                   (namestring chemacs))))

  (let ((profile (merge-pathnames ".emacs-profiles.el" (user-homedir-pathname))))
    (when (uiop:directory-exists-p profile)
      (rename-file profile (merge-pathnames ".emacs-profile.bak" (user-homedir-pathname))))
    (with-open-file (out profile :direction :output :if-exists :supersede)
      (with-standard-io-syntax
        ;; TODO Optimise
        (eval `(princ
                (format nil
                        (concatenate 'string
                                     "((\"default\" . ((user-emacs-directory . \"~A\")~%"
                                     "                 (env . ((\"DOOMDIR\" . \"~A\")))))~%"
                                     "(\"spacemacs\" . ((user-emacs-directory . \"~A\")~%"
                                     "                 (env . ((\"SPACEMACSDIR\" . \"~A\"))))))")
                        ,@(mapcar #'(lambda (path) (concatenate 'string *home* path))
                                  (list "/config/doomemacs"
                                        "/config/.doom.d"
                                        "/config/spacemacs"
                                        "/config/.spacemacs.d"))) ,out))))
    (print profile)))

(defun install ()
  (print "Installing lemacs...~%")
  (if (uiop:directory-exists-p (parse-namestring *home*))
      (print (format nil "Folder ~A exists...exit" *home*))
      (clone)))

(defun update ()
  (print "Updating lemacs...~%")
  (shell (format nil "cd ~A;git pull --ff-only;git submodule foreach git pull --ff-only;cd $OLDPWD" *home*)))

(defun uninstall ()
  ;; TODO Optimise
  (print "Uninstall")
  ;; (uiop:delete-directory-tree (uiop:physicalize-pathname "C:/Liszt/Projects/Temp/test"))
  (shell (format nil "~A ~A" #+os-windows "rm -r -Force" #-os-windows "rm -rf" *home*)))

(defun doom (&optional (command "help"))
  (shell (format nil "~A ~A" (concatenate 'string *home*
                                          "/config/doomemacs/bin/doom") command)))

(defun help ()
  (print "Help"))

(defun main (&rest argv)
  (declare (ignorable argv))
  (let ((command (first argv))
        (params (cdr argv)))
    (cond
     ((equalp command "install")
      (install))
     ((equalp command "config")
      (config))
     ((equalp command "update")
      (update))
     ((equalp command "uninstall")
      (uninstall))
     ((equalp command "doom")
      (apply #'doom params))
     (t
      (help)))))
     
;;; vim: set ft=lisp lisp:
