#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  (ros:ensure-asdf)
  #+quicklisp (ql:quickload '(uiop clish str) :silent t))

(defpackage :ros.script.emacy
  (:use :cl))
(in-package :ros.script.emacy)

(defun folder-exists (path)
  (let ((p (and path (probe-file path))))
    (when (and p (not (pathname-name p))) p)))

(defun shell (&rest cmds)
  (let ((command (str:join ";" cmds)))
    (third
     (multiple-value-list
      (uiop:run-program
       (format nil "~A~A"
               #+os-windows "powershell $OLDPWD=pwd;"
               #-os-windows ""
               command)
       :output :interactive
       :ignore-error-status t
       :error-output :interactive)))))

(defun clone-repo (remote &optional (target nil))
  (if (and target (probe-file target))
      (format t "Repo ~A already cloned, skip...~%" remote)
      (format t "Cloning ~A...~A~%"
              remote
              (if (> (shell (format nil "git clone ~A ~A" remote target)) 0)
                  " failed"
                  nil))))

(defun link (source target &key (force nil))
  (format t "Linking ~A to ~A~%" target source)
  (when (probe-file target)
        (print "111")
        (if (or force (y-or-n-p (format t "~A already exists, remove?" target)))
            (shell "rm -rf ~A" target)
            (return-from link 128)))
  (shell (format nil "ln -s ~A ~A" source target)))

(defun update-repo (target)
  (if (probe-file target)
      (shell (format nil "cd ~A; git pull --ff-only; cd $OLDPWD" target))
      (format t "Target ~A does not exist~%" target)))

(defparameter *home*
  (let ((s (car
            (member-if
             #'folder-exists
             (list ".emacy" "Emacy" "../.emacy" "../Emacy"
                   (uiop:getenv "EMACY") "~/.emacy" "~/Emacy")))))
    (if s (probe-file s) s)))

(defparameter *profiles* '((doom .
                            ((module . "https://github.com/hlissner/doom-emacs")
                             (config . "https://github.com/Liszt21/.doom.d")))
                           (spacemacs .
                            ((module . "https://github.com/syl20bnr/spacemacs")
                             (config . "https://github.com/Liszt21/.spacemacs.d")))))

(defun check ()
  (format t "Checking...~%")
  (when (not *home*)
        (setf *home* (merge-pathnames #+os-windows "Emacy" #+linux ".emacy" (user-homedir-pathname))))
  (format t "Emacy home: ~A~%" *home*)
  (when (not (probe-file (merge-pathnames "bin/emacy" *home*)))
        (format t "Emacy was not installed, cloning...~%")
        (shell (format nil
                       "rm -rf ~A; git clone http://github.com/Liszt21/Emacy ~A"
                       *home* *home*))))

(defun get-repos (&optional (profiles *profiles*) (home *home*))
  (cons
   (cons "https://github.com/plexus/chemacs2" (merge-pathnames "local/chemacs2" home))
   (loop for profile in profiles
         for name = (string-downcase (string (car profile)))
         for module = (cdr (assoc 'module (cdr profile)))
         for config = (cdr (assoc 'config (cdr profile)))
         collect (cons module (merge-pathnames (format nil "local/~A/module" name) home))
         collect (cons config (merge-pathnames (format nil "local/~A/config" name) home)))))

(defun generate-profile-content (&optional (target #p"~/.emacs-profile.el") (profiles *profiles*) (home *home*))
  (loop for profile in profiles
        for name = (string-downcase (string (car profile)))
        for module = (namestring (merge-pathnames (format nil "local/~A/module" name) home))
        for config = (namestring (merge-pathnames (format nil "local/~A/config" name) home))
        collect (format nil "(\"~A\" (user-emacs-directory . \"~A\") (env (\"~A\" . \"~A\")))"
                        name module (format nil "~ADIR" (car profile)) config)))

(defun install ()
  (format t "Installing...~%")
  (dolist (repo (get-repos))
          (clone-repo (car repo) (cdr repo)))
  (with-open-file (out #p"~/.emacs-profiles.el" :direction :output :if-exists :supersede)
    (princ (generate-profile-content) out))
  (with-open-file (out #p"~/.emacs-profile" :direction :output :if-exists :supersede)
    (princ (string-downcase (string (caar *profiles*))) out)))

(defun update ()
  (format t "Updating...~%")
  (update-repo *home*)
  (dolist (repo (get-repos))
          (update-repo (cdr repo))))

(clish:defcli cli
  (nil (lambda () (update)))
  (install #'install)
  (:pre (lambda (&rest rest) (declare (ignorable rest)) (check))))

(defun main (&rest argv)
  (declare (ignorable argv))
  (apply #'cli argv))

;;; vim: set ft=lisp lisp:
